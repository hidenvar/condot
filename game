[1mdiff --git a/include/player.hpp b/include/player.hpp[m
[1mindex baa8fcf..2c7df90 100644[m
[1m--- a/include/player.hpp[m
[1m+++ b/include/player.hpp[m
[36m@@ -32,10 +32,10 @@[m [mpublic:[m
   void SetPosition(const Position& position);[m
   const Position& GetPosition() const;[m
 private:[m
[32m+[m[32m  void PlayCard();[m
   void RenderCards(const AssetManager& assets, Vector2 cordinate, float rotation) const;[m
   void RenderRows(const AssetManager& assets, Vector2 cordinate, float rotation) const;[m
[31m-  bool IsCollided(AssetManager& assets, const Position& position);[m
[31m-  const Card& TakeCard(const size_t& position);[m
[32m+[m[32m  const Card& PickCard(const size_t& position);[m
   void Pass();[m
   void AddRowCard(const Card& card);[m
 private:[m
[1mdiff --git a/src/game.cpp b/src/game.cpp[m
[1mindex 46f895b..2717314 100644[m
[1m--- a/src/game.cpp[m
[1m+++ b/src/game.cpp[m
[36m@@ -7,6 +7,7 @@[m
 #include <player.hpp>[m
 #include <card.hpp>[m
 #include <mercenary.hpp>[m
[32m+[m[32m#include <system_error>[m
 [m
 Game::Game()[m
 : m_Map(&m_State)[m
[36m@@ -45,6 +46,10 @@[m [mvoid Game::Update()[m
   for (Player& p : m_Players)[m
   {[m
     p.Update();[m
[32m+[m[32m    if (m_State.Get() == State::ROTATING_TURN)[m
[32m+[m[32m    {[m
[32m+[m[32m      RotateTurn();[m
[32m+[m[32m    }[m
   }[m
 [m
   m_Map.Update();[m
[36m@@ -137,7 +142,7 @@[m [mvoid Game::InitiateBattle()[m
   DealCards();[m
 }[m
 [m
[31m-bool Game::NextTurn(){[m
[32m+[m[32mbool Game::RotateTurn(){[m
   size_t StartPos = (m_Turn);[m
   for(size_t i{},passed{1}; i < m_Players.size(); ++i){[m
     [m
[1mdiff --git a/src/player.cpp b/src/player.cpp[m
[1mindex e1dfb82..d1ae97b 100644[m
[1m--- a/src/player.cpp[m
[1m+++ b/src/player.cpp[m
[36m@@ -1,3 +1,4 @@[m
[32m+[m[32m#include <cmath>[m
 #include <raylib.h>[m
 [m
 #include <asset_manager.hpp>[m
[36m@@ -18,14 +19,8 @@[m [mPlayer::Player(State* state, const std::string& name, Color color, int age, Posi[m
 [m
 void Player::Update()[m
 {[m
[31m-  if (m_State->Get() == State::PLAYING_CARD)[m
[31m-  {[m
[31m-    /*[m
[31m-    TODO(@hidenvar):[m
[31m-    PickCard() and then PlayCard() or perhaps merge the two[m
[31m-    Execute m_State->Set(State::ROTATING_TURN) after card was chosen[m
[31m-    */[m
[31m-  }[m
[32m+[m[32m    PlayCard();[m
[32m+[m[32m   // m_State->Set(State::ROTATING_TURN);[m
 }[m
 [m
 void Player::AddCard(Card card)[m
[36m@@ -152,35 +147,38 @@[m [mvoid Player::RenderCards(const AssetManager& assets, Vector2 cordinate, float ro[m
       cordinate.y -= 50;[m
       [m
     }  [m
[31m-  }}[m
[31m-[m
[31m-bool Player::IsCollided(AssetManager& assets, const Position& position){[m
[31m-  if( position == Position::BOTTOM){[m
[31m-    size_t i = 0;[m
[31m-    for(auto it = m_Cards.rbegin(); it != m_Cards.rend(); ++it){[m
[31m-      Rectangle LowerLayer = {570 + (float) 50 * i,880, 50 ,(float) it->GetAsset(assets).height};[m
[31m-      Rectangle UpperLayer = {570 + (float) 50 * i,880, 120 ,(float) it->GetAsset(assets).height};[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid Player::PlayCard(){[m
[32m+[m[32m  if (m_Position == Position::BOTTOM)[m
[32m+[m[32m  {[m
[32m+[m[32m    size_t index = 0;[m
[32m+[m[32m    for(auto it = m_Cards.rbegin(); it != m_Cards.rend(); ++it)[m
[32m+[m[32m    {[m
[32m+[m[32m      Rectangle LowerLayer = {570 + (float) 50 * index , 880 , 50  , 190};[m
[32m+[m[32m    //Rectangle UpperLayer = {570 + (float) 50 * index , 880 , 120 , 190};[m
         [m
[31m-      if((CheckCollisionPointRec(GetMousePosition(), LowerLayer) ||[m
[31m-         (CheckCollisionPointRec(GetMousePosition(), UpperLayer) &&[m
[31m-          m_Cards.size() - 1 == i )) && [m
[31m-          IsMouseButtonPressed(MOUSE_LEFT_BUTTON))[m
[32m+[m[32m      if((CheckCollisionPointRec(GetMousePosition(), LowerLayer) &&[m
[32m+[m[32m         //(CheckCollisionPointRec(GetMousePosition(), UpperLayer) &&[m
[32m+[m[32m         // m_Cards.size() - 1 == i )) &&[m[41m [m
[32m+[m[32m          IsMouseButtonPressed(MOUSE_LEFT_BUTTON)))[m
         {[m
[31m-          auto card = TakeCard(i);[m
[32m+[m[32m          auto card = PickCard(index);[m
           AddRowCard(card);[m
[31m-          return true;[m
         }[m
[31m-        i++;[m
[31m-      }[m
[32m+[m[32m      else if (CheckCollisionPointRec(GetMousePosition(),(Rectangle){420, 950, 70, 50}) &&[m
[32m+[m[32m           IsMouseButtonPressed(MOUSE_LEFT_BUTTON)){}[m
[32m+[m[32m      index++;[m
     }[m
[31m-    return false;    [m
[32m+[m[32m  }[m
[32m+[m[41m    [m
 }[m
[31m-[m
 int Player::GetAge() const {[m
   return m_Age;[m
 }[m
 [m
[31m-const Card& Player::TakeCard(const size_t& position){[m
[32m+[m[32mconst Card& Player::PickCard(const size_t& position){[m
   Card& card = *(m_Cards.begin() + position);[m
   m_Cards.erase(m_Cards.begin() + position);[m
   return card;[m
